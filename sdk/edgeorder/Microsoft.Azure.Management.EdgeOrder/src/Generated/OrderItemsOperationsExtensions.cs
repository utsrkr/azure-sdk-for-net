// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrderItemsOperations.
    /// </summary>
    public static partial class OrderItemsOperationsExtensions
    {
            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of orders, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderItemResource> ListAtSubscriptionLevel(this IOrderItemsOperations operations, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListAtSubscriptionLevelAsync(filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of orders, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListAtSubscriptionLevelAsync(this IOrderItemsOperations operations, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelWithHttpMessagesAsync(filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order items, which provides the next
            /// page in the list of order items.
            /// </param>
            public static IPage<OrderItemResource> ListAtResourceGroupLevel(this IOrderItemsOperations operations, string resourceGroupName, string filter = default(string), string expand = default(string), string skipToken = default(string))
            {
                return operations.ListAtResourceGroupLevelAsync(resourceGroupName, filter, expand, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order items, which provides the next
            /// page in the list of order items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListAtResourceGroupLevelAsync(this IOrderItemsOperations operations, string resourceGroupName, string filter = default(string), string expand = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, filter, expand, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            public static OrderItemResource Get(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, string expand = default(string))
            {
                return operations.GetAsync(orderItemName, resourceGroupName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> GetAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(orderItemName, resourceGroupName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            public static OrderItemResource Create(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource)
            {
                return operations.CreateAsync(orderItemName, resourceGroupName, orderItemResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> CreateAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void Delete(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName)
            {
                operations.DeleteAsync(orderItemName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(orderItemName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            public static OrderItemResource Update(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string))
            {
                return operations.UpdateAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> UpdateAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationReason'>
            /// Reason for cancellation.
            /// </param>
            public static void Cancel(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, CancellationReason cancellationReason)
            {
                operations.CancelAsync(orderItemName, resourceGroupName, cancellationReason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationReason'>
            /// Reason for cancellation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, CancellationReason cancellationReason, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(orderItemName, resourceGroupName, cancellationReason, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            public static void ReturnOperation(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails)
            {
                operations.ReturnOperationAsync(orderItemName, resourceGroupName, returnOrderItemDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReturnOperationAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReturnOperationWithHttpMessagesAsync(orderItemName, resourceGroupName, returnOrderItemDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            public static OrderItemResource BeginCreate(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource)
            {
                return operations.BeginCreateAsync(orderItemName, resourceGroupName, orderItemResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> BeginCreateAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void BeginDelete(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(orderItemName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(orderItemName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            public static OrderItemResource BeginUpdate(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string))
            {
                return operations.BeginUpdateAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> BeginUpdateAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            public static void BeginReturnOperation(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails)
            {
                operations.BeginReturnOperationAsync(orderItemName, resourceGroupName, returnOrderItemDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReturnOperationAsync(this IOrderItemsOperations operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginReturnOperationWithHttpMessagesAsync(orderItemName, resourceGroupName, returnOrderItemDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderItemResource> ListAtSubscriptionLevelNext(this IOrderItemsOperations operations, string nextPageLink)
            {
                return operations.ListAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListAtSubscriptionLevelNextAsync(this IOrderItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderItemResource> ListAtResourceGroupLevelNext(this IOrderItemsOperations operations, string nextPageLink)
            {
                return operations.ListAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListAtResourceGroupLevelNextAsync(this IOrderItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
