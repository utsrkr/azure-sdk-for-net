// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrdersOperations.
    /// </summary>
    public static partial class OrdersOperationsExtensions
    {
            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderResource> ListAtSubscriptionLevel(this IOrdersOperations operations, string skipToken = default(string))
            {
                return operations.ListAtSubscriptionLevelAsync(skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListAtSubscriptionLevelAsync(this IOrdersOperations operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderResource> ListAtResourceGroupLevel(this IOrdersOperations operations, string resourceGroupName, string skipToken = default(string))
            {
                return operations.ListAtResourceGroupLevelAsync(resourceGroupName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListAtResourceGroupLevelAsync(this IOrdersOperations operations, string resourceGroupName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderName'>
            /// The name of the order
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='location'>
            /// The name of Azure region.
            /// </param>
            public static OrderResource Get(this IOrdersOperations operations, string orderName, string resourceGroupName, string location)
            {
                return operations.GetAsync(orderName, resourceGroupName, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderName'>
            /// The name of the order
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='location'>
            /// The name of Azure region.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderResource> GetAsync(this IOrdersOperations operations, string orderName, string resourceGroupName, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(orderName, resourceGroupName, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderResource> ListAtSubscriptionLevelNext(this IOrdersOperations operations, string nextPageLink)
            {
                return operations.ListAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListAtSubscriptionLevelNextAsync(this IOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderResource> ListAtResourceGroupLevelNext(this IOrdersOperations operations, string nextPageLink)
            {
                return operations.ListAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListAtResourceGroupLevelNextAsync(this IOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
