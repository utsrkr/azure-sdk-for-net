// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceOperations.
    /// </summary>
    public static partial class ServiceOperationsExtensions
    {
            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productFamiliesRequest'>
            /// Filters for showing the product families.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on configurations parameter for product, which
            /// provides details on the configurations for the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families, which provides the
            /// next page in the list of product families.
            /// </param>
            public static IPage<ProductFamily> ListProductFamilies(this IServiceOperations operations, ProductFamiliesRequest productFamiliesRequest, string expand = default(string), string skipToken = default(string))
            {
                return operations.ListProductFamiliesAsync(productFamiliesRequest, expand, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productFamiliesRequest'>
            /// Filters for showing the product families.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on configurations parameter for product, which
            /// provides details on the configurations for the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families, which provides the
            /// next page in the list of product families.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamily>> ListProductFamiliesAsync(this IServiceOperations operations, ProductFamiliesRequest productFamiliesRequest, string expand = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesWithHttpMessagesAsync(productFamiliesRequest, expand, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationsRequest'>
            /// Filters for showing the configurations.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of configurations, which provides the next
            /// page in the list of configurations.
            /// </param>
            public static IPage<Configuration> ListConfigurations(this IServiceOperations operations, ConfigurationsRequest configurationsRequest, string skipToken = default(string))
            {
                return operations.ListConfigurationsAsync(configurationsRequest, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationsRequest'>
            /// Filters for showing the configurations.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of configurations, which provides the next
            /// page in the list of configurations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListConfigurationsAsync(this IServiceOperations operations, ConfigurationsRequest configurationsRequest, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsWithHttpMessagesAsync(configurationsRequest, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families metadata, which
            /// provides the next page in the list of product families metadata.
            /// </param>
            public static IPage<ProductFamiliesMetadataDetails> ListProductFamiliesMetadata(this IServiceOperations operations, string skipToken = default(string))
            {
                return operations.ListProductFamiliesMetadataAsync(skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families metadata, which
            /// provides the next page in the list of product families metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamiliesMetadataDetails>> ListProductFamiliesMetadataAsync(this IServiceOperations operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesMetadataWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProductFamily> ListProductFamiliesNext(this IServiceOperations operations, string nextPageLink)
            {
                return operations.ListProductFamiliesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamily>> ListProductFamiliesNextAsync(this IServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Configuration> ListConfigurationsNext(this IServiceOperations operations, string nextPageLink)
            {
                return operations.ListConfigurationsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListConfigurationsNextAsync(this IServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProductFamiliesMetadataDetails> ListProductFamiliesMetadataNext(this IServiceOperations operations, string nextPageLink)
            {
                return operations.ListProductFamiliesMetadataNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamiliesMetadataDetails>> ListProductFamiliesMetadataNextAsync(this IServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesMetadataNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
