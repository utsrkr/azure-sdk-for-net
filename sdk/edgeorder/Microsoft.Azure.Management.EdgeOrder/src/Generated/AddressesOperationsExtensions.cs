// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AddressesOperations.
    /// </summary>
    public static partial class AddressesOperationsExtensions
    {
            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of addresses.
            /// </param>
            public static IPage<AddressResource> ListAtSubscriptionLevel(this IAddressesOperations operations, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListAtSubscriptionLevelAsync(filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of addresses.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAtSubscriptionLevelAsync(this IAddressesOperations operations, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelWithHttpMessagesAsync(filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of address.
            /// </param>
            public static IPage<AddressResource> ListAtResourceGroupLevel(this IAddressesOperations operations, string resourceGroupName, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListAtResourceGroupLevelAsync(resourceGroupName, filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of address.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAtResourceGroupLevelAsync(this IAddressesOperations operations, string resourceGroupName, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the specified address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static AddressResource Get(this IAddressesOperations operations, string addressName, string resourceGroupName)
            {
                return operations.GetAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> GetAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            public static AddressResource Create(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressResource addressResource)
            {
                return operations.CreateAsync(addressName, resourceGroupName, addressResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> CreateAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(addressName, resourceGroupName, addressResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void Delete(this IAddressesOperations operations, string addressName, string resourceGroupName)
            {
                operations.DeleteAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            public static AddressResource Update(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string))
            {
                return operations.UpdateAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> UpdateAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            public static AddressResource BeginCreate(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressResource addressResource)
            {
                return operations.BeginCreateAsync(addressName, resourceGroupName, addressResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> BeginCreateAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(addressName, resourceGroupName, addressResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void BeginDelete(this IAddressesOperations operations, string addressName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            public static AddressResource BeginUpdate(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string))
            {
                return operations.BeginUpdateAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> BeginUpdateAsync(this IAddressesOperations operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AddressResource> ListAtSubscriptionLevelNext(this IAddressesOperations operations, string nextPageLink)
            {
                return operations.ListAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAtSubscriptionLevelNextAsync(this IAddressesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AddressResource> ListAtResourceGroupLevelNext(this IAddressesOperations operations, string nextPageLink)
            {
                return operations.ListAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAtResourceGroupLevelNextAsync(this IAddressesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
